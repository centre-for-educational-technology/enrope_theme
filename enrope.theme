<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\block\Entity\Block;
use Drupal\user\Entity\User;
use Drupal\group\Entity\GroupContent;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 *
 */
function enrope_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function enrope_preprocess_page(&$variables)
{
  $menu = Block::load('enrope_main_menu');
  $variables['main_menu'] = \Drupal::entityTypeManager()->getViewBuilder('block')->view($menu);

  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['current_page_title'] = $page_title;


  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['node'] = $node;
  }

  $group_node = \Drupal::routeMatch()->getParameter('group');
  $portfolio_node = \Drupal::routeMatch()->getParameter('e_portfolio');

  if ($group_node) {
    $variables['group'] = $group_node;
  }


  //error_log(print_r(\Drupal::routeMatch()->getRouteName(), true));


}

/**
 * Implements hook_preprocess_block().
 */
function enrope_preprocess_block(&$variables)
{

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $variables['node_type'] = $node->bundle();
  }

}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function enrope_preprocess_breadcrumb(&$variables)
{

  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']) {

    $variables['#cache']['contexts'][] = 'url';
  }

}

/**
 * Implements hook_preprocess_menu_local_tasks().
 */
function enrope_preprocess_menu_local_tasks(&$data, $route_name)
{
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $data['node_type'] = $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_user_alter().
 */
function enrope_theme_suggestions_user_alter(array &$suggestions, array $variables)
{
  $view_mode = $variables['elements']['#view_mode'];
  $suggestions[] = 'user__' . $view_mode;
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function enrope_theme_suggestions_alter(array &$suggestions, array $variables, $hook)
{
  if ($hook == 'node_edit_form') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $content_type = $node->bundle();
    } else {
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $content_type = $path_args[3];
    }
    $suggestions[] = 'node_edit_form__' . $content_type;
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function enrope_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_views_view_list_alter().
 */
function enrope_theme_suggestions_views_view_list_alter(array &$suggestions, array $variables)
{

  if ($variables['view']->id() === 'group_mem') {
    $suggestions[] = 'views_view_list__group_mem';
  }

}


/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
//function enrope_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
//  $suggestions[] = sprintf('views_view__%s', $variables['view']->id());
//}


/**
 * Implements hook_preprocess_image().
 */
function enrope_preprocess_image(&$variables)
{
  if ($variables['style_name'] == 'avatar') {
    $variables['attributes']['class'][] = 'img-thumbnail rounded-circle';
  }
}


/**
 * Implements hook_preprocess_node().
 */
function enrope_preprocess_node(&$variables)
{

  // check if this is the right content type where the field exists
  if ($variables['node']->getType() == 'portfolio_competency' || $variables['node']->getType() == 'portfolio_showcase') {
    // taxonomy field
    $field = $variables['node']->get('field_request_peer_expert_feedba')->getString();


    if ($field == false) {

      $variables['content']['comment']['#access'] = FALSE;
    }
  }


}

function enrope_preprocess(&$variables, $hook)
{
  $variables['base_path'] = base_path();
}


/**
 * Implements HOOK_preprocess_entity_print__entity().
 */
function enrope_preprocess_entity_print(&$variables)
{
  $route = \Drupal::routeMatch();
  $entity_type = $route->getParameter('entity_type');
  $entity_id = $route->getParameter('entity_id');
  if ($entity_type == 'node') {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($entity_id);

    $author = $node->getOwner()->id();

    $database = \Drupal::database();
    $query = $database->select('node_field_data', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.uid', $author);
    $query->condition('n.type', 'e_portfolio');
    $result = $query->execute()->fetchAll();

    if (!empty($result)) {
      $node = \Drupal\node\Entity\Node::load($result[0]->nid);
      $portfolio_title = $node->getTitle();

      $variables['portfolio_title'] = $portfolio_title;
    }


  }
}


function enrope_preprocess_links__language_block(&$variables)
{
  $currentLanguageCode = \Drupal::languageManager()
      ->getCurrentLanguage()
      ->getId();
  // replace key of active language with 'activeLink'
  foreach ($variables['links'] as $i => $link) {
    /** @var \Drupal\language\Entity\ConfigurableLanguage $linkLanguage */
    $linkLanguage = $link['link']['#options']['language'];
    if ($currentLanguageCode == $linkLanguage->get('id')) {
      $variables['links']['activeLink'] = $link;
      unset($variables['links'][$i]);
    }
  }
  // if there is only 2 languages remove active one
  if (sizeof($variables['links']) == 2) {
    unset($variables['links']['activeLink']);
    // give class 'btn btn-primary' to alternate language
    /** @var \Drupal\Core\Url $alternate */
    $alternate = current($variables['links']);
    $alternate['link']['#options']['attributes']['class'][] = 'btn';
    $alternate['link']['#options']['attributes']['class'][] = 'btn-primary';
    $variables['links'] = [$alternate];
  }
}


function enrope_preprocess_user(&$variables)
{

  $currentUser = \Drupal::currentUser()->id();

  $connection = \Drupal::service('database');

  $user_following = $connection->select('enrope_follow_user_data')
      ->fields('enrope_follow_user_data', ['following_uid'])
      ->condition('uid', $currentUser)
      ->execute()
      ->fetchCol();

  if (in_array($variables['user']->id(), $user_following)) {
    $follow_button = ['type' => 'unfollow', 'value' => t('Unfollow')];
  } else {
    $follow_button = ['type' => 'follow', 'value' => t('Follow')];
  }


  $variables['follow_button'] = $follow_button;

  $variables['current_user'] = $currentUser;
  $variables['#cache']['contexts'][] = 'user';

  $variables['#cache']['max-age'] = 0;
}